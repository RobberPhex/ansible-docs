.. _consul_acl:


consul_acl - manipulate consul acl keys and rules
+++++++++++++++++++++++++++++++++++++++++++++++++

.. versionadded:: 2.0


.. contents::
   :local:
   :depth: 2


Synopsis
--------

* allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/internals/acl.html.


Requirements (on host that executes module)
-------------------------------------------

  * python >= 2.6
  * python-consul
  * pyhcl
  * requests


Options
-------

.. raw:: html

    <table border=1 cellpadding=4>
    <tr>
    <th class="head">parameter</th>
    <th class="head">required</th>
    <th class="head">default</th>
    <th class="head">choices</th>
    <th class="head">comments</th>
    </tr>
                <tr><td>host<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td>localhost</td>
        <td></td>
        <td><div>host of the consul agent defaults to localhost</div>        </td></tr>
                <tr><td>mgmt_token<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td></td>
        <td></td>
        <td><div>a management token is required to manipulate the acl lists</div>        </td></tr>
                <tr><td>name<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td></td>
        <td></td>
        <td><div>the name that should be associated with the acl key, this is opaque to Consul</div>        </td></tr>
                <tr><td>port<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td>8500</td>
        <td></td>
        <td><div>the port on which the consul agent is running</div>        </td></tr>
                <tr><td>rules<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td></td>
        <td></td>
        <td><div>an list of the rules that should be associated with a given token.</div>        </td></tr>
                <tr><td>scheme<br/><div style="font-size: small;"> (added in 2.1)</div></td>
    <td>no</td>
    <td>http</td>
        <td></td>
        <td><div>the protocol scheme on which the consul agent is running</div>        </td></tr>
                <tr><td>state<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td>present</td>
        <td><ul><li>present</li><li>absent</li></ul></td>
        <td><div>whether the ACL pair should be present or absent</div>        </td></tr>
                <tr><td>token<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td></td>
        <td></td>
        <td><div>the token key indentifying an ACL rule set. If generated by consul this will be a UUID.</div>        </td></tr>
                <tr><td>token_type<br/><div style="font-size: small;"></div></td>
    <td>no</td>
    <td>client</td>
        <td><ul><li>client</li><li>management</li></ul></td>
        <td><div>the type of token that should be created, either management or client</div>        </td></tr>
                <tr><td>validate_certs<br/><div style="font-size: small;"> (added in 2.1)</div></td>
    <td>no</td>
    <td>True</td>
        <td></td>
        <td><div>whether to verify the tls certificate of the consul agent</div>        </td></tr>
        </table>
    </br>



Examples
--------

 ::

        - name: create an acl token with rules
          consul_acl:
            mgmt_token: 'some_management_acl'
            host: 'consul1.mycluster.io'
            name: 'Foo access'
            rules:
              - key: 'foo'
                policy: read
              - key: 'private/foo'
                policy: deny
    
        - name: create an acl with specific token with both key and service rules
          consul_acl:
            mgmt_token: 'some_management_acl'
            name: 'Foo access'
            token: 'some_client_token'
            rules:
              - key: 'foo'
                policy: read
              - service: ''
                policy: write
              - service: 'secret-'
                policy: deny
    
        - name: remove a token
          consul_acl:
            mgmt_token: 'some_management_acl'
            host: 'consul1.mycluster.io'
            token: '172bd5c8-9fe9-11e4-b1b0-3c15c2c9fd5e'
            state: absent





Status
~~~~~~

This module is flagged as **preview** which means that it is not guaranteed to have a backwards compatible interface.


Support
~~~~~~~

This module is community maintained without core committer oversight.

For more information on what this means please read :doc:`modules_support`


For help in developing on modules, should you be so inclined, please read :doc:`community`, :doc:`dev_guide/developing_test_pr` and :doc:`dev_guide/developing_modules`.
